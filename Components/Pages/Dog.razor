@page "/"
@rendermode InteractiveServer

<PageTitle>Dog</PageTitle>

<div class="container text-center">
    <h1>Dogs On Demand!</h1>
    <div class="row" onload="OnLoad">
        <div class="col">
        </div>
        <div class="col-6">
            <div class="img-container">
                <img src="@imgUrl" class="img-max-size" />
            </div>
            <p>@fact</p>
            <div class="row">
                <div class="col">
                    <button @onclick="GetDog" class="btn btn-dark btn-lg">GetDog</button>
                    <button @onclick="GetDogFact" class="btn btn-dark btn-lg">GetDogFact</button>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <button @onclick="WriteToFie" class="btn btn-outline-dark btn-lg">Save</button>
                    <button @onclick="ReadFromFile" class="btn btn-outline-dark btn-lg">Load</button>
                </div>
            </div>
        </div>
        <div class=" col">
        </div>
    </div>
</div>

<style>
    .img-max-size {
        max-height: 100%;
        max-width: 100%;
        height: auto;
        width: auto;
    }

    .img-container {
        height: 55vh;
        width: 100%;
    }

    img {
        border: solid 2px;
    }

    h1 {
        font-family: 'GoodDog Cool';
        font-size: 10vh;
    }

    p {
        padding: 1rem;
        height: 15vh;
        font-size: x-large;
    }

    button {
        margin: 0.5rem;
    }
</style>


@code {
    string imgUrl = "";
    string preload_img = "";
    string fact = "";
    bool loaded = false;
    private void GetDog()
    {
        imgUrl = preload_img;
        IDogImageService dogImageService = new RandomDogImageService();
        preload_img = dogImageService.GetImage();
    }

    private void GetDogFact()
    {
        IDogFactService factService = new DogApiFactSercie();
        fact = factService.GetFact();
    }

    private void Preload()
    {
        IDogImageService dogImageService = new RandomDogImageService();
        preload_img = dogImageService.GetImage();
    }

    private void OnLoad()
    {
        Preload();
        GetDog();
        GetDogFact();
    }

    private void WriteToFie()
    {
        var content = new DogFileContent(imgUrl, fact);
        IFileAdapter fileHandler = new DogFileHandler();
        fileHandler.WriteToFile(content);
    }

    private void ReadFromFile()
    {
        IFileAdapter fileHandler = new DogFileHandler();
        var content = fileHandler.ReadFromFile();
        imgUrl = content.ImageUrl;
        fact = content.Fact;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OnLoad();
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
}
